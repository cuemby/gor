name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]


jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: make test

    - name: Run tests with race detector
      run: make test-race

    - name: Generate coverage report
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage_output/coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Install and run golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.62.2
        $(go env GOPATH)/bin/golangci-lint run --timeout=5m

    - name: Run code quality checks
      run: |
        echo "Checking formatting..."
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted properly:"
          gofmt -s -l .
          exit 1
        fi

        echo "Running go vet..."
        go vet ./...

        echo "Checking go mod tidy..."
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Install and run staticcheck
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

  security:
    name: Security
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Install security tools
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest &
        go install golang.org/x/vuln/cmd/govulncheck@latest &
        wait

    - name: Run security scans
      run: |
        echo "Running Gosec..."
        $(go env GOPATH)/bin/gosec -severity high -fmt sarif -out gosec.sarif ./... &
        GOSEC_PID=$!

        echo "Running govulncheck..."
        govulncheck ./...

        wait $GOSEC_PID

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif

  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Install shellcheck
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck

    - name: Make scripts executable
      run: |
        chmod +x scripts/docs/validate-docs.sh
        chmod +x scripts/docs/sync-llms.sh
        chmod +x scripts/docs/update-claude.sh

    - name: Check shell scripts with shellcheck
      run: make shellcheck

    - name: Validate documentation integrity
      run: make docs-validate

    - name: Check documentation sync
      run: |
        # Generate coverage first to ensure llms.txt has accurate data
        make test-coverage || true

        # Now sync documentation
        make docs-sync || true

        # Check if there are changes (warning only, not failure)
        if ! git diff --quiet docs/dev/llms.txt; then
          echo "::warning::llms.txt may be out of sync with codebase"
          echo "This can happen if coverage data differs between local and CI"
          echo "To update: run 'make test-coverage && make docs-sync' locally"
        fi

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'

    - name: Build CLI
      run: make build

    - name: Build examples
      run: make build-all

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gor
        path: bin/gor

