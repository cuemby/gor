name: SLSA Provenance

on:
  workflow_run:
    workflows: ["Release"]
    types: [completed]
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Get the release data to obtain checksums for SLSA provenance
  get-checksums:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Get release tag
        id: tag
        run: |
          # Get the tag from the workflow that triggered this
          TAG=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
                     jq -r .tag_name)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download release assets
        run: |
          # Download all assets from the latest release
          TAG="${{ steps.tag.outputs.tag }}"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" | \
               jq -r '.assets[] | select(.name | test("gor-.*-.*$"; "g")) | .browser_download_url' | \
               xargs -I {} curl -L -O {}

      - name: Generate hashes for SLSA
        id: hash
        run: |
          # Generate checksums for all downloaded binaries
          find . -name "gor-*" -type f ! -name "*.tar.gz" ! -name "*.zip" | sort | xargs sha256sum > checksums.txt
          echo "Generated checksums:"
          cat checksums.txt

          # Create base64 encoded hashes for SLSA
          echo "hashes=$(cat checksums.txt | base64 -w0)" >> $GITHUB_OUTPUT

  # Generate SLSA provenance using the generic generator
  provenance:
    needs: [get-checksums]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.get-checksums.outputs.hashes }}"
      upload-assets: true