#!/bin/bash
# Pre-push hook for Gor Framework
# Performs comprehensive checks before allowing push

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Running pre-push checks...${NC}"
echo "This may take a few minutes for comprehensive testing"
echo ""

# Track start time
START_TIME=$(date +%s)

# Function to show elapsed time
show_elapsed() {
    END_TIME=$(date +%s)
    ELAPSED=$((END_TIME - START_TIME))
    echo -e "${BLUE}‚è±Ô∏è  Elapsed time: ${ELAPSED} seconds${NC}"
}

# 1. Format check
echo "1Ô∏è‚É£  Checking code formatting..."
UNFORMATTED=$(gofmt -s -l .)
if [ -n "$UNFORMATTED" ]; then
    echo -e "${RED}‚ùå The following files need formatting:${NC}"
    echo "$UNFORMATTED"
    echo -e "${YELLOW}Run 'make fmt' to fix${NC}"
    exit 1
fi
echo -e "${GREEN}‚úÖ Code formatting check passed${NC}"

# 2. Run go vet
echo "2Ô∏è‚É£  Running go vet..."
go vet ./... || {
    echo -e "${RED}‚ùå go vet failed${NC}"
    exit 1
}
echo -e "${GREEN}‚úÖ go vet passed${NC}"

# 3. Check go mod tidy
echo "3Ô∏è‚É£  Checking go.mod tidiness..."
cp go.mod go.mod.backup
cp go.sum go.sum.backup
go mod tidy
if ! diff -q go.mod go.mod.backup > /dev/null 2>&1 || ! diff -q go.sum go.sum.backup > /dev/null 2>&1; then
    mv go.mod.backup go.mod
    mv go.sum.backup go.sum
    echo -e "${RED}‚ùå go.mod/go.sum need updating. Run 'go mod tidy'${NC}"
    exit 1
fi
rm go.mod.backup go.sum.backup
echo -e "${GREEN}‚úÖ go.mod is tidy${NC}"

# 4. Run tests
echo "4Ô∏è‚É£  Running tests..."
go test ./... || {
    echo -e "${RED}‚ùå Tests failed${NC}"
    show_elapsed
    exit 1
}
echo -e "${GREEN}‚úÖ All tests passed${NC}"

# 5. Run golangci-lint if available
echo "5Ô∏è‚É£  Running linter..."
if command -v golangci-lint >/dev/null 2>&1; then
    golangci-lint run --timeout=5m ./... || {
        echo -e "${RED}‚ùå Linting failed${NC}"
        show_elapsed
        exit 1
    }
    echo -e "${GREEN}‚úÖ Linting passed${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  golangci-lint not installed, skipping lint check${NC}"
    echo -e "${YELLOW}   Install with: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.62.2${NC}"
fi

# 6. Run race detector (optional - can be slow)
echo "6Ô∏è‚É£  Running race detector..."
echo -e "${YELLOW}   (This may take a while...)${NC}"
go test -race -short ./... || {
    echo -e "${RED}‚ùå Race conditions detected${NC}"
    show_elapsed
    exit 1
}
echo -e "${GREEN}‚úÖ No race conditions detected${NC}"

# 7. Build check
echo "7Ô∏è‚É£  Verifying build..."
make build > /dev/null 2>&1 || {
    echo -e "${RED}‚ùå Build failed${NC}"
    show_elapsed
    exit 1
}
echo -e "${GREEN}‚úÖ Build successful${NC}"

# 8. Optional: Check for security issues if tools are available
if command -v gosec >/dev/null 2>&1; then
    echo "8Ô∏è‚É£  Running security scan..."
    gosec -quiet -fmt json ./... > /dev/null 2>&1 || {
        echo -e "${YELLOW}‚ö†Ô∏è  Security issues found (non-blocking)${NC}"
        echo -e "${YELLOW}   Run 'gosec ./...' for details${NC}"
    }
else
    echo -e "${YELLOW}‚ÑπÔ∏è  gosec not installed, skipping security check${NC}"
fi

show_elapsed
echo ""
echo -e "${GREEN}üéâ All pre-push checks passed! Safe to push.${NC}"
echo ""

# Provide helpful context
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${BLUE}üìå Pushing to branch: ${BRANCH}${NC}"

# If pushing to main/master, show extra warning
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "master" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  You're pushing to ${BRANCH}. Make sure this is intentional!${NC}"
fi