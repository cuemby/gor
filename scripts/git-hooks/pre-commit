#!/bin/bash
# Pre-commit hook for Gor Framework
# Performs fast checks before allowing commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "🔍 Running pre-commit checks..."

# 1. Check formatting with gofmt -s
echo "Checking code formatting..."
UNFORMATTED=$(gofmt -s -l .)
if [ -n "$UNFORMATTED" ]; then
    echo -e "${RED}❌ The following files need formatting:${NC}"
    echo "$UNFORMATTED"
    echo -e "${YELLOW}Run 'make fmt' or 'gofmt -s -w .' to fix${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Code formatting check passed${NC}"

# 2. Run go vet on staged Go files only
echo "Running go vet on staged files..."
STAGED_GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.go$' || true)
if [ -n "$STAGED_GO_FILES" ]; then
    # Run vet on each package containing staged files
    PACKAGES=$(echo "$STAGED_GO_FILES" | xargs -n1 dirname | sort -u | sed 's|^|./|')
    for pkg in $PACKAGES; do
        go vet "$pkg" || {
            echo -e "${RED}❌ go vet failed for package: $pkg${NC}"
            exit 1
        }
    done
fi
echo -e "${GREEN}✅ go vet check passed${NC}"

# 3. Check for common issues in staged files
echo "Checking for common issues..."

# Check for debugging prints in staged files
if [ -n "$STAGED_GO_FILES" ]; then
    DEBUG_STATEMENTS=$(echo "$STAGED_GO_FILES" | xargs grep -n "fmt.Println\|println\|print(" 2>/dev/null | grep -v "^[[:space:]]*\/\/" || true)
    if [ -n "$DEBUG_STATEMENTS" ]; then
        echo -e "${YELLOW}⚠️  Warning: Debug print statements found:${NC}"
        echo "$DEBUG_STATEMENTS"
        echo -e "${YELLOW}Consider removing debug statements before committing${NC}"
        # This is a warning, not a failure
    fi
fi

# 4. Check that tests compile (fast check)
echo "Verifying tests compile..."
go test -run=^$ ./... > /dev/null 2>&1 || {
    echo -e "${RED}❌ Tests don't compile. Please fix compilation errors.${NC}"
    exit 1
}
echo -e "${GREEN}✅ Test compilation check passed${NC}"

# 5. Check go.mod is tidy
echo "Checking go.mod tidiness..."
cp go.mod go.mod.backup
cp go.sum go.sum.backup 2>/dev/null || true
go mod tidy
if ! diff -q go.mod go.mod.backup > /dev/null 2>&1; then
    mv go.mod.backup go.mod
    mv go.sum.backup go.sum 2>/dev/null || true
    echo -e "${RED}❌ go.mod is not tidy. Run 'go mod tidy' and stage the changes.${NC}"
    exit 1
fi
rm go.mod.backup
rm go.sum.backup 2>/dev/null || true
echo -e "${GREEN}✅ go.mod tidy check passed${NC}"

echo -e "${GREEN}✨ All pre-commit checks passed!${NC}"